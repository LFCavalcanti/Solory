// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  companyGroups UserToCompanyGroup[]
  companies     UserToCompany[]
  emailValidationTokens emailValidationToken[]
  settings      UserSettings[]
  serviceOrders ServiceOrder[]
  serviceOrderEvents ServiceOrderEvent[]
  businessRoles UserToBusinessRole[]
}

model UserSettings {
  id String    @id @default(cuid())
  userId       String @unique
  activeCompanyId String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model emailValidationToken {
  identifier  String   @id @default(cuid())
  token       String   @unique @db.Text
  createdAt   DateTime
  expiresAt   DateTime
  ActivatedAt DateTime?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  @@unique([identifier, token])
}

model BusinessRole {
  id              String @id @default(cuid())
  isActive        Boolean @default(true)
  name            String
  serviceOrder Boolean @default(false)
  invoiceCalculate Boolean @default(false)
  createdAt DateTime
  disabledAt DateTime?
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  users UserToBusinessRole[]
  @@unique([id, companyId])
  @@unique([companyId, name])
}

model UserToBusinessRole {
  id             String @id @default(cuid())
  isActive         Boolean @default(true)
  createdAt      DateTime
  disabledAt DateTime?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  businessRole   BusinessRole     @relation(fields: [businessRoleId], references: [id], onDelete: Cascade)
  businessRoleId String
  @@unique([userId, businessRoleId])
}

model CompanyGroup {
  id              String @id @default(cuid())
  isActive        Boolean @default(true)
  name            String
  description     String
  createdAt       DateTime
  disabledAt      DateTime?
  shareSuppliers  Boolean @default(true) @db.Boolean
  shareClients    Boolean @default(true) @db.Boolean
  shareProducts   Boolean @default(true) @db.Boolean
  shareKpi        Boolean @default(true) @db.Boolean
  companies       Company[]
  users           UserToCompanyGroup[]
  products        Product[]
  suppliers       Supplier[]
  simplesNacConfigs SimplesNacConfig[]
  customers       Customer[]
}

model UserToCompanyGroup {
  id             String @id @default(cuid())
  isActive         Boolean @default(true)
  createdAt      DateTime
  expiredAt      DateTime?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  companyGroup   CompanyGroup     @relation(fields: [companyGroupId], references: [id], onDelete: Cascade)
  companyGroupId String
  @@unique([userId, companyGroupId])
}

model Company {
  id           String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  aliasName    String @db.VarChar(60)
  fullName     String
  cnpj         String @db.VarChar(14)
  logo         String?
  mainCnae     String @db.VarChar(7)
  mainIssCode  String? @db.VarChar(4)
  isMei        Boolean @default(false)
  isSimplesNac Boolean @default(false)
  phone        String
  serviceOrderPattern String @default("SEQUENCE")
  companyGroup         CompanyGroup     @relation(fields: [companyGroupId], references: [id], onDelete: Cascade)
  companyGroupId String
  users        UserToCompany[]
  adresses     CompanyAddress[]
  companyCnaeIss CompanyCnaeIss[]
  simplesNacConfigs SimplesNacConfig[]
  suppliers Supplier[]
  products Product[]
  customers       Customer[]
  contracts Contract[]
  projects Project[]
  serviceOrders ServiceOrder[]
  businessRoles BusinessRole[]

  @@unique([cnpj, companyGroupId])
  @@index([isActive, companyGroupId, cnpj])
  @@index([isActive, aliasName])
  @@index([isActive, cnpj])
}

model UserToCompany {
  id        String  @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt DateTime
  expiredAt DateTime?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  @@unique([userId, companyId])
}

model CompanyAddress {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  isMainAddress Boolean
  street String
  lotNumber String
  complement String?
  locale String
  postalCode String
  state String
  cities   cities @relation(fields: [cityCode], references: [code])
  cityCode String
  information String? @db.Text
  @@index([isActive, companyId, isMainAddress])
}

model CompanyCnaeIss {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  cnaeCode String @db.VarChar(7)
  description     String
  issCode String? @db.VarChar(4)
  @@index([isActive, companyId, cnaeCode])
}

model Product {
  id String @id @default(cuid())
  isActive Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  code String
  description String
  productType productType @relation(fields: [typeId], references: [id])
  typeId String
  ncm String
  codCnae String
  codIss String
  codebar String?
  gtin String?
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  companyGroup   CompanyGroup @relation(fields: [companyGroupId], references: [id], onDelete: Cascade)
  companyGroupId String
  @@unique([code, companyId])
  @@index([companyId, code])
  @@index([companyGroupId, code])
  @@index([companyGroupId, companyId, code])
  contractItems ContractItem[]
}

model productType {
  id String @id
  description String
  products Product[]
}

model cities {
  code String @id
  name String
  state String
  companyAddress CompanyAddress[]
  supplierAddress SupplierAddress[]
  customerAddress CustomerAddress[]
  @@index([state, code])
}

model SimplesNacConfig {
  id  String @id @default(cuid())
  isActive Boolean @default(true)
  createdAt DateTime
  disabledAt DateTime?
  activeSince DateTime
  expiresAt DateTime?
  cnaeCode String @db.VarChar(7)
  anexoSimples String
  isEligibleRFactor Boolean
  rFactor Float
  aliquotStandard Float
  aliquotRFactor Float
  anexoSimplesFatorR String?
  floorRevenue Float
  ceilRevenue Float
  company         Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  companyGroup         CompanyGroup     @relation(fields: [companyGroupId], references: [id], onDelete: Cascade)
  companyGroupId String
  @@unique([isActive, companyId, anexoSimples, expiresAt])
  @@index([isActive, companyGroupId, companyId, anexoSimples, isEligibleRFactor])
}

model Supplier {
  id           String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  code          String
  aliasName    String @db.VarChar(60)
  fullName     String
  cnpj         String @db.VarChar(14)
  logo         String?
  isMei        Boolean @default(false)
  isSimplesNac Boolean @default(false)
  phone        String
  company         Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  companyGroup         CompanyGroup     @relation(fields: [companyGroupId], references: [id], onDelete: Cascade)
  companyGroupId String
  adresses     SupplierAddress[]
  contacts    SupplierContact[]

  @@unique([cnpj, companyGroupId])
  @@index([isActive, companyGroupId, cnpj])
  @@index([isActive, aliasName])
  @@index([isActive, cnpj])
  @@index([isActive, id])
}

model SupplierAddress {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String
  isMainAddress Boolean
  street String
  lotNumber String
  complement String?
  locale String
  postalCode String
  state String
  cities   cities @relation(fields: [cityCode], references: [code])
  cityCode String
  information String? @db.Text
  @@index([isActive, supplierId, isMainAddress])
}

model SupplierContact {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt DateTime
  expiredAt DateTime?
  name String
  role String
  email String
  phone String
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  @@index([isActive, supplierId, id])
  @@index([isActive, supplierId, email])
}

model Contract {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  termStart DateTime
  termEnd DateTime?
  termDuration Int
  description String
  recurrence String
  measureType String
  contractType String
  paymentType String
  paymentTerm Int
  invoiceClosureDay Int?
  autoRenewal Boolean @default(false)
  renewalPriceIndex String @db.VarChar(10)
  generalNotes String
  company         Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  items    ContractItem[]
  projects    Project[]
  serviceOrders ServiceOrder[]
  contractDocumentApprovers ContractDocumentApprover[]
}

model ContractItem {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  description String
  itemType String
  quantity Float
  price Float
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId String
  projectMilestones ProjectMilestone[]
  serviceOrders ServiceOrder[]
  @@index([isActive, id])
  @@index([isActive, id, contractId])
  @@index([isActive, id, contractId, productId])
}

model ContractDocumentApprover {
  id String @id @default(cuid())
  isActive     Boolean @default(true)
  contractId String
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  customerContactId String
  customerContact CustomerContact @relation(fields: [customerContactId], references: [id])
  approveServiceOrder Boolean
  @@index([isActive, id])
  @@index([isActive, id, contractId])
  @@index([isActive, id, contractId, customerContactId])
}

model Customer {
  id           String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  code          String
  aliasName    String @db.VarChar(60)
  fullName     String
  cnpj         String @db.VarChar(14)
  logo         String?
  isMei        Boolean @default(false)
  isSimplesNac Boolean @default(false)
  phone        String
  company         Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  companyGroup         CompanyGroup     @relation(fields: [companyGroupId], references: [id], onDelete: Cascade)
  companyGroupId String
  adresses     CustomerAddress[]
  contacts    CustomerContact[]
  contracts Contract[]
  projects Project[]
  serviceOrders ServiceOrder[]

  @@unique([cnpj, companyGroupId])
  @@index([isActive, companyGroupId, cnpj])
  @@index([isActive, aliasName])
  @@index([isActive, cnpj])
  @@index([isActive, id])
}

model CustomerAddress {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  isMainAddress Boolean
  street String
  lotNumber String
  complement String?
  locale String
  postalCode String
  state String
  cities   cities @relation(fields: [cityCode], references: [code])
  cityCode String
  information String? @db.Text
  serviceOrders ServiceOrder[]
  @@index([isActive, customerId, isMainAddress])
}

model CustomerContact {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt DateTime
  expiredAt DateTime?
  name String
  role String
  email String
  phone String
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractDocumentApprovers ContractDocumentApprover[]
  @@index([isActive, customerId, id])
  @@index([isActive, customerId, email])
}

model Project {
  id  String @default(cuid())
  version Int @default(1)
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  name String
  description String
  type String
  status String
  progress Int
  startDate DateTime @db.Date
  endDate DateTime? @db.Date
  totalCost Float
  measureType String
  customer Customer @relation(fields: [customerId], references:[id], onDelete: Cascade)
  customerId String
  contract Contract? @relation(fields: [contractId], references:[id], onDelete: Cascade)
  contractId String?
  company Company @relation(fields: [companyId], references:[id], onDelete: Cascade)
  companyId String
  milestones ProjectMilestone[]
  @@id(name: "projectId", [id, version])
  @@index([id, customerId, contractId])
  @@index([companyId, customerId, contractId, id])
}

model ProjectMilestone {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  order Int
  description String
  status String
  progress Int
  isPaymentReq Boolean @default(false)
  paymentValue Float
  contractItem ContractItem? @relation(fields: [contractItemId], references: [id], onDelete: Cascade)
  contractItemId String?
  project   Project @relation(fields: [projectId, ProjectVersion], references: [id, version], onDelete: Cascade)
  projectId String
  ProjectVersion Int
  tasks ProjectTask[]
  @@index([id, projectId, contractItemId])
  @@index([projectId, contractItemId, id])
}

model ProjectTask {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  order Int
  description String
  status String
  progress Int
  effortUnit String
  effortQuantity Float
  effortExecuted Float @default(0)
  effortBalance Float
  milestone ProjectMilestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  milestoneId String?
  activities ProjectActivity[]
  @@index([id, milestoneId])
  @@index([milestoneId,id])
}

model ProjectActivity {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  order Int
  description String
  status String
  progress Int
  effortUnit String
  effortQuantity Float
  effortExecuted Float @default(0)
  effortBalance Float
  task   ProjectTask @relation(fields: [taskId], references: [id])
  taskId String
  @@index([id, taskId])
  @@index([taskId,id])
}

model ServiceOrder {
  id  String @id @default(cuid())
  orderCode String
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  status String
  company Company @relation(fields: [companyId], references:[id], onDelete: Cascade)
  companyId String
  customer Customer @relation(fields: [customerId], references:[id], onDelete: Cascade)
  customerId String
  customerAddress CustomerAddress? @relation(fields: [customerAddressId], references: [id], onDelete: Cascade)
  customerAddressId String?
  contract Contract @relation(fields: [contractId], references:[id], onDelete: Cascade)
  contractId String
  contractItem ContractItem @relation(fields: [contractItemId], references: [id], onDelete: Cascade)
  contractItemId String
  user User @relation(fields: [analystId], references:[id], onDelete: Cascade)
  analystId String
  orderDate DateTime
  startTime DateTime
  endTime DateTime
  breakTotal Float
  totalWork Float
  type String
  serviceSummary String
  tasksText String @db.Text
  notesText String? @db.Text
  meals Int
  travel Boolean
  events ServiceOrderEvent[]
  @@unique([companyId, orderCode])
  @@index([id, customerId, contractId])
  @@index([customerId, contractId, orderCode])
  @@index([companyId, customerId, contractId, orderCode, id])
}

model ServiceOrderEvent {
  id  String @id @default(cuid())
  serviceOrder ServiceOrder @relation(fields: [serviceOrderId], references:[id], onDelete: Cascade)
  serviceOrderId String
  timeStamp DateTime
  eventType String
  isActionAutomatic Boolean
  description String
  user User? @relation(fields: [userId], references:[id], onDelete: Cascade)
  userId String?
}
