// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  companyGroups UserToCompanyGroup[]
  companies     UserToCompany[]
  emailValidationTokens emailValidationToken[]
  settings      UserSettings[]
}

model UserSettings {
  id String    @id @default(cuid())
  userId       String @unique
  activeCompanyId String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model emailValidationToken {
  identifier  String   @id @default(cuid())
  token       String   @unique @db.Text
  createdAt   DateTime
  expiresAt   DateTime
  ActivatedAt DateTime?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  @@unique([identifier, token])
}

model CompanyGroup {
  id              String @id @default(cuid())
  isActive        Boolean @default(true)
  name            String
  description     String
  createdAt       DateTime
  disabledAt      DateTime?
  shareSuppliers  Boolean @default(true) @db.Boolean
  shareClients    Boolean @default(true) @db.Boolean
  shareProducts   Boolean @default(true) @db.Boolean
  shareKpi        Boolean @default(true) @db.Boolean
  companies       Company[]
  users           UserToCompanyGroup[]
  products        Product[]
  suppliers       Supplier[]
}

model UserToCompanyGroup {
  id             String @id @default(cuid())
  isActive         Boolean @default(true)
  createdAt      DateTime
  expiredAt      DateTime?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  companyGroup   CompanyGroup     @relation(fields: [companyGroupId], references: [id], onDelete: Cascade)
  companyGroupId String
  @@unique([userId, companyGroupId])
}

model Company {
  id           String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  aliasName    String @db.VarChar(60)
  fullName     String
  cnpj         String @db.VarChar(14)
  logo         String?
  mainCnae     String @db.VarChar(7)
  mainIssCode  String? @db.VarChar(4)
  isMei        Boolean @default(false)
  isSimplesNac Boolean @default(false)
  phone        String
  companyGroup         CompanyGroup     @relation(fields: [companyGroupId], references: [id], onDelete: Cascade)
  companyGroupId String
  users        UserToCompany[]
  adresses     CompanyAddress[]
  companyCnaeIss CompanyCnaeIss[]
  simplesNacConfigs simplesNacConfig[]
  suppliers Supplier[]
  products Product[]

  @@unique([cnpj, companyGroupId])
  @@index([isActive, companyGroupId, cnpj])
  @@index([isActive, aliasName])
  @@index([isActive, cnpj])
}

model UserToCompany {
  id        String  @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt DateTime
  expiredAt DateTime?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  @@unique([userId, companyId])
}

model CompanyAddress {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  isMainAddress Boolean
  street String
  lotNumber String
  complement String?
  locale String
  postalCode String
  state String
  cities   cities @relation(fields: [cityCode], references: [code])
  cityCode String
  information String? @db.Text
  @@index([isActive, companyId, isMainAddress])
}

model CompanyCnaeIss {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  cnaeCode String @db.VarChar(7)
  description     String
  issCode String? @db.VarChar(4)
  @@index([isActive, companyId, cnaeCode])
}

model Product {
  id String @id @default(cuid())
  isActive Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  code String
  description String
  productType productType @relation(fields: [typeId], references: [id])
  typeId String
  ncm String
  codCnae String
  codIss String
  codebar String?
  gtin String?
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  companyGroup   CompanyGroup @relation(fields: [companyGroupId], references: [id], onDelete: Cascade)
  companyGroupId String
  @@unique([code, companyId])
  @@index([companyId, code])
  @@index([companyGroupId, code])
  @@index([companyGroupId, companyId, code])
}

model productType {
  id String @id
  description String
  products Product[]
}

model cities {
  code String @id
  name String
  state String
  companyAddress CompanyAddress[]
  supplierAddress SupplierAddress[]
  @@index([state, code])
}

model simplesNacConfig {
  id  String @id @default(cuid())
  createdAt DateTime
  expiredAt DateTime?
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  cnaeCode String @db.VarChar(7)
  anexoSimples String
  isEligibleRFactor Boolean
  rFactor Float
  aliquotStandard Float
  aliquotRFactor Float
}

model Supplier {
  id           String @id @default(cuid())
  isActive     Boolean @default(true)
  createdAt       DateTime
  disabledAt      DateTime?
  code          String
  aliasName    String @db.VarChar(60)
  fullName     String
  cnpj         String @db.VarChar(14)
  logo         String?
  isMei        Boolean @default(false)
  isSimplesNac Boolean @default(false)
  phone        String
  company         Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  companyGroup         CompanyGroup     @relation(fields: [companyGroupId], references: [id], onDelete: Cascade)
  companyGroupId String
  adresses     SupplierAddress[]

  @@unique([cnpj, companyGroupId])
  @@index([isActive, companyGroupId, cnpj])
  @@index([isActive, aliasName])
  @@index([isActive, cnpj])
  @@index([isActive, id])
}

model SupplierAddress {
  id  String @id @default(cuid())
  isActive     Boolean @default(true)
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String
  isMainAddress Boolean
  street String
  lotNumber String
  complement String?
  locale String
  postalCode String
  state String
  cities   cities @relation(fields: [cityCode], references: [code])
  cityCode String
  information String? @db.Text
  @@index([isActive, supplierId, isMainAddress])
}
